/**
 * simplebar - v6.2.5
 * Scrollbars, simpler.
 * https://grsmto.github.io/simplebar/
 *
 * Made by Adrien Denat from a fork by Jonathan Nicol
 * Under MIT License
 */

const SimpleBar = (function () { "use strict"; let e = function (t, i) { return e = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) { e.__proto__ = t; } || function (e, t) { for (const i in t)Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]); }, e(t, i); }; const t = !(typeof window === "undefined" || !window.document || !window.document.createElement); const i = typeof global === "object" && global && global.Object === Object && global; const s = typeof self === "object" && self && self.Object === Object && self; const r = i || s || Function("return this")(); const l = r.Symbol; const o = Object.prototype; const n = o.hasOwnProperty; const a = o.toString; const c = l ? l.toStringTag : void 0; const h = Object.prototype.toString; const u = l ? l.toStringTag : void 0; function d (e) { return e == null ? void 0 === e ? "[object Undefined]" : "[object Null]" : u && u in Object(e) ? (function (e) { const t = n.call(e, c); const i = e[c]; try { e[c] = void 0; var s = !0; } catch (e) {} const r = a.call(e); return s && (t ? e[c] = i : delete e[c]), r; }(e)) : (function (e) { return h.call(e); }(e)); } const p = /\s/; const v = /^\s+/; function f (e) { return e ? e.slice(0, (function (e) { for (var t = e.length; t-- && p.test(e.charAt(t)););return t; }(e)) + 1).replace(v, "") : e; } function m (e) { const t = typeof e; return e != null && (t == "object" || t == "function"); } const b = /^[-+]0x[0-9a-f]+$/i; const g = /^0b[01]+$/i; const x = /^0o[0-7]+$/i; const y = parseInt; function E (e) { if (typeof e === "number") return e; if (function (e) { return typeof e === "symbol" || (function (e) { return e != null && typeof e === "object"; }(e)) && d(e) == "[object Symbol]"; }(e)) return NaN; if (m(e)) { const t = typeof e.valueOf === "function" ? e.valueOf() : e; e = m(t) ? t + "" : t; } if (typeof e !== "string") return e === 0 ? e : +e; e = f(e); const i = g.test(e); return i || x.test(e) ? y(e.slice(2), i ? 2 : 8) : b.test(e) ? NaN : +e; } const O = function () { return r.Date.now(); }; const w = Math.max; const S = Math.min; function A (e, t, i) { let s; let r; let l; let o; let n; let a; let c = 0; let h = !1; let u = !1; let d = !0; if (typeof e !== "function") throw new TypeError("Expected a function"); function p (t) { const i = s; const l = r; return s = r = void 0, c = t, o = e.apply(l, i); } function v (e) { return c = e, n = setTimeout(b, t), h ? p(e) : o; } function f (e) { const i = e - a; return void 0 === a || i >= t || i < 0 || u && e - c >= l; } function b () { const e = O(); if (f(e)) return g(e); n = setTimeout(b, (function (e) { const i = t - (e - a); return u ? S(i, l - (e - c)) : i; }(e))); } function g (e) { return n = void 0, d && s ? p(e) : (s = r = void 0, o); } function x () { const e = O(); const i = f(e); if (s = arguments, r = this, a = e, i) { if (void 0 === n) return v(a); if (u) return clearTimeout(n), n = setTimeout(b, t), p(a); } return void 0 === n && (n = setTimeout(b, t)), o; } return t = E(t) || 0, m(i) && (h = !!i.leading, l = (u = "maxWait" in i) ? w(E(i.maxWait) || 0, t) : l, d = "trailing" in i ? !!i.trailing : d), x.cancel = function () { void 0 !== n && clearTimeout(n), c = 0, s = a = r = n = void 0; }, x.flush = function () { return void 0 === n ? o : g(O()); }, x; } let k = function () { return k = Object.assign || function (e) { for (var t, i = 1, s = arguments.length; i < s; i++) for (const r in t = arguments[i])Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]); return e; }, k.apply(this, arguments); }; let W = null; let M = null; function N () { if (W === null) { if (typeof document === "undefined") return W = 0; const e = document.body; const t = document.createElement("div"); t.classList.add("simplebar-hide-scrollbar"), e.appendChild(t); const i = t.getBoundingClientRect().right; e.removeChild(t), W = i; } return W; } function L (e) { return e && e.ownerDocument && e.ownerDocument.defaultView ? e.ownerDocument.defaultView : window; } function z (e) { return e && e.ownerDocument ? e.ownerDocument : document; }t && window.addEventListener("resize", function () { M !== window.devicePixelRatio && (M = window.devicePixelRatio, W = null); }); const C = function (e) { return Array.prototype.reduce.call(e, function (e, t) { const i = t.name.match(/data-simplebar-(.+)/); if (i) { const s = i[1].replace(/\W+(.)/g, function (e, t) { return t.toUpperCase(); }); switch (t.value) { case "true":e[s] = !0; break; case "false":e[s] = !1; break; case void 0:e[s] = !0; break; default:e[s] = t.value; } } return e; }, {}); }; function T (e, t) { let i; e && (i = e.classList).add.apply(i, t.split(" ")); } function R (e, t) { e && t.split(" ").forEach(function (t) { e.classList.remove(t); }); } function D (e) { return ".".concat(e.split(" ").join(".")); } const V = Object.freeze({ __proto__: null, getElementWindow: L, getElementDocument: z, getOptions: C, addClasses: T, removeClasses: R, classNamesToQuery: D }); const H = L; const j = z; const B = C; const _ = T; const q = R; const P = D; const X = (function () { function e (t, i) { void 0 === i && (i = {}); const s = this; if (this.removePreventClickId = null, this.minScrollbarWidth = 20, this.stopScrollDelay = 175, this.isScrolling = !1, this.isMouseEntering = !1, this.scrollXTicking = !1, this.scrollYTicking = !1, this.wrapperEl = null, this.contentWrapperEl = null, this.contentEl = null, this.offsetEl = null, this.maskEl = null, this.placeholderEl = null, this.heightAutoObserverWrapperEl = null, this.heightAutoObserverEl = null, this.rtlHelpers = null, this.scrollbarWidth = 0, this.resizeObserver = null, this.mutationObserver = null, this.elStyles = null, this.isRtl = null, this.mouseX = 0, this.mouseY = 0, this.onMouseMove = function () {}, this.onWindowResize = function () {}, this.onStopScrolling = function () {}, this.onMouseEntered = function () {}, this.onScroll = function () { const e = H(s.el); s.scrollXTicking || (e.requestAnimationFrame(s.scrollX), s.scrollXTicking = !0), s.scrollYTicking || (e.requestAnimationFrame(s.scrollY), s.scrollYTicking = !0), s.isScrolling || (s.isScrolling = !0, _(s.el, s.classNames.scrolling)), s.showScrollbar("x"), s.showScrollbar("y"), s.onStopScrolling(); }, this.scrollX = function () { s.axis.x.isOverflowing && s.positionScrollbar("x"), s.scrollXTicking = !1; }, this.scrollY = function () { s.axis.y.isOverflowing && s.positionScrollbar("y"), s.scrollYTicking = !1; }, this._onStopScrolling = function () { q(s.el, s.classNames.scrolling), s.options.autoHide && (s.hideScrollbar("x"), s.hideScrollbar("y")), s.isScrolling = !1; }, this.onMouseEnter = function () { s.isMouseEntering || (_(s.el, s.classNames.mouseEntered), s.showScrollbar("x"), s.showScrollbar("y"), s.isMouseEntering = !0), s.onMouseEntered(); }, this._onMouseEntered = function () { q(s.el, s.classNames.mouseEntered), s.options.autoHide && (s.hideScrollbar("x"), s.hideScrollbar("y")), s.isMouseEntering = !1; }, this._onMouseMove = function (e) { s.mouseX = e.clientX, s.mouseY = e.clientY, (s.axis.x.isOverflowing || s.axis.x.forceVisible) && s.onMouseMoveForAxis("x"), (s.axis.y.isOverflowing || s.axis.y.forceVisible) && s.onMouseMoveForAxis("y"); }, this.onMouseLeave = function () { s.onMouseMove.cancel(), (s.axis.x.isOverflowing || s.axis.x.forceVisible) && s.onMouseLeaveForAxis("x"), (s.axis.y.isOverflowing || s.axis.y.forceVisible) && s.onMouseLeaveForAxis("y"), s.mouseX = -1, s.mouseY = -1; }, this._onWindowResize = function () { s.scrollbarWidth = s.getScrollbarWidth(), s.hideNativeScrollbar(); }, this.onPointerEvent = function (e) { let t, i; s.axis.x.track.el && s.axis.y.track.el && s.axis.x.scrollbar.el && s.axis.y.scrollbar.el && (s.axis.x.track.rect = s.axis.x.track.el.getBoundingClientRect(), s.axis.y.track.rect = s.axis.y.track.el.getBoundingClientRect(), (s.axis.x.isOverflowing || s.axis.x.forceVisible) && (t = s.isWithinBounds(s.axis.x.track.rect)), (s.axis.y.isOverflowing || s.axis.y.forceVisible) && (i = s.isWithinBounds(s.axis.y.track.rect)), (t || i) && (e.stopPropagation(), e.type === "pointerdown" && e.pointerType !== "touch" && (t && (s.axis.x.scrollbar.rect = s.axis.x.scrollbar.el.getBoundingClientRect(), s.isWithinBounds(s.axis.x.scrollbar.rect) ? s.onDragStart(e, "x") : s.onTrackClick(e, "x")), i && (s.axis.y.scrollbar.rect = s.axis.y.scrollbar.el.getBoundingClientRect(), s.isWithinBounds(s.axis.y.scrollbar.rect) ? s.onDragStart(e, "y") : s.onTrackClick(e, "y"))))); }, this.drag = function (t) { let i, r, l, o, n, a, c, h, u, d, p; if (s.draggedAxis && s.contentWrapperEl) { const v = s.axis[s.draggedAxis].track; const f = (r = (i = v.rect) === null || void 0 === i ? void 0 : i[s.axis[s.draggedAxis].sizeAttr]) !== null && void 0 !== r ? r : 0; const m = s.axis[s.draggedAxis].scrollbar; const b = (o = (l = s.contentWrapperEl) === null || void 0 === l ? void 0 : l[s.axis[s.draggedAxis].scrollSizeAttr]) !== null && void 0 !== o ? o : 0; const g = parseInt((a = (n = s.elStyles) === null || void 0 === n ? void 0 : n[s.axis[s.draggedAxis].sizeAttr]) !== null && void 0 !== a ? a : "0px", 10); t.preventDefault(), t.stopPropagation(); let x = (s.draggedAxis === "y" ? t.pageY : t.pageX) - ((h = (c = v.rect) === null || void 0 === c ? void 0 : c[s.axis[s.draggedAxis].offsetAttr]) !== null && void 0 !== h ? h : 0) - s.axis[s.draggedAxis].dragOffset; let y = (x = s.draggedAxis === "x" && s.isRtl ? ((d = (u = v.rect) === null || void 0 === u ? void 0 : u[s.axis[s.draggedAxis].sizeAttr]) !== null && void 0 !== d ? d : 0) - m.size - x : x) / (f - m.size) * (b - g); s.draggedAxis === "x" && s.isRtl && (y = ((p = e.getRtlHelpers()) === null || void 0 === p ? void 0 : p.isScrollingToNegative) ? -y : y), s.contentWrapperEl[s.axis[s.draggedAxis].scrollOffsetAttr] = y; } }, this.onEndDrag = function (e) { const t = j(s.el); const i = H(s.el); e.preventDefault(), e.stopPropagation(), q(s.el, s.classNames.dragging), t.removeEventListener("mousemove", s.drag, !0), t.removeEventListener("mouseup", s.onEndDrag, !0), s.removePreventClickId = i.setTimeout(function () { t.removeEventListener("click", s.preventClick, !0), t.removeEventListener("dblclick", s.preventClick, !0), s.removePreventClickId = null; }); }, this.preventClick = function (e) { e.preventDefault(), e.stopPropagation(); }, this.el = t, this.options = k(k({}, e.defaultOptions), i), this.classNames = k(k({}, e.defaultOptions.classNames), i.classNames), this.axis = { x: { scrollOffsetAttr: "scrollLeft", sizeAttr: "width", scrollSizeAttr: "scrollWidth", offsetSizeAttr: "offsetWidth", offsetAttr: "left", overflowAttr: "overflowX", dragOffset: 0, isOverflowing: !0, forceVisible: !1, track: { size: null, el: null, rect: null, isVisible: !1 }, scrollbar: { size: null, el: null, rect: null, isVisible: !1 } }, y: { scrollOffsetAttr: "scrollTop", sizeAttr: "height", scrollSizeAttr: "scrollHeight", offsetSizeAttr: "offsetHeight", offsetAttr: "top", overflowAttr: "overflowY", dragOffset: 0, isOverflowing: !0, forceVisible: !1, track: { size: null, el: null, rect: null, isVisible: !1 }, scrollbar: { size: null, el: null, rect: null, isVisible: !1 } } }, typeof this.el !== "object" || !this.el.nodeName) throw new Error("Argument passed to SimpleBar must be an HTML element instead of ".concat(this.el)); this.onMouseMove = (function (e, t, i) { let s = !0; let r = !0; if (typeof e !== "function") throw new TypeError("Expected a function"); return m(i) && (s = "leading" in i ? !!i.leading : s, r = "trailing" in i ? !!i.trailing : r), A(e, t, { leading: s, maxWait: t, trailing: r }); }(this._onMouseMove, 64)), this.onWindowResize = A(this._onWindowResize, 64, { leading: !0 }), this.onStopScrolling = A(this._onStopScrolling, this.stopScrollDelay), this.onMouseEntered = A(this._onMouseEntered, this.stopScrollDelay), this.init(); } return e.getRtlHelpers = function () { if (e.rtlHelpers) return e.rtlHelpers; const t = document.createElement("div"); t.innerHTML = '<div class="simplebar-dummy-scrollbar-size"><div></div></div>'; const i = t.firstElementChild; const s = i == null ? void 0 : i.firstElementChild; if (!s) return null; document.body.appendChild(i), i.scrollLeft = 0; const r = e.getOffset(i); const l = e.getOffset(s); i.scrollLeft = -999; const o = e.getOffset(s); return document.body.removeChild(i), e.rtlHelpers = { isScrollOriginAtZero: r.left !== l.left, isScrollingToNegative: l.left !== o.left }, e.rtlHelpers; }, e.prototype.getScrollbarWidth = function () { try { return this.contentWrapperEl && getComputedStyle(this.contentWrapperEl, "::-webkit-scrollbar").display === "none" || "scrollbarWidth" in document.documentElement.style || "-ms-overflow-style" in document.documentElement.style ? 0 : N(); } catch (e) { return N(); } }, e.getOffset = function (e) { const t = e.getBoundingClientRect(); const i = j(e); const s = H(e); return { top: t.top + (s.pageYOffset || i.documentElement.scrollTop), left: t.left + (s.pageXOffset || i.documentElement.scrollLeft) }; }, e.prototype.init = function () { t && (this.initDOM(), this.rtlHelpers = e.getRtlHelpers(), this.scrollbarWidth = this.getScrollbarWidth(), this.recalculate(), this.initListeners()); }, e.prototype.initDOM = function () { let e, t; this.wrapperEl = this.el.querySelector(P(this.classNames.wrapper)), this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector(P(this.classNames.contentWrapper)), this.contentEl = this.options.contentNode || this.el.querySelector(P(this.classNames.contentEl)), this.offsetEl = this.el.querySelector(P(this.classNames.offset)), this.maskEl = this.el.querySelector(P(this.classNames.mask)), this.placeholderEl = this.findChild(this.wrapperEl, P(this.classNames.placeholder)), this.heightAutoObserverWrapperEl = this.el.querySelector(P(this.classNames.heightAutoObserverWrapperEl)), this.heightAutoObserverEl = this.el.querySelector(P(this.classNames.heightAutoObserverEl)), this.axis.x.track.el = this.findChild(this.el, "".concat(P(this.classNames.track)).concat(P(this.classNames.horizontal))), this.axis.y.track.el = this.findChild(this.el, "".concat(P(this.classNames.track)).concat(P(this.classNames.vertical))), this.axis.x.scrollbar.el = ((e = this.axis.x.track.el) === null || void 0 === e ? void 0 : e.querySelector(P(this.classNames.scrollbar))) || null, this.axis.y.scrollbar.el = ((t = this.axis.y.track.el) === null || void 0 === t ? void 0 : t.querySelector(P(this.classNames.scrollbar))) || null, this.options.autoHide || (_(this.axis.x.scrollbar.el, this.classNames.visible), _(this.axis.y.scrollbar.el, this.classNames.visible)); }, e.prototype.initListeners = function () { let e; const t = this; const i = H(this.el); if (this.el.addEventListener("mouseenter", this.onMouseEnter), this.el.addEventListener("pointerdown", this.onPointerEvent, !0), this.el.addEventListener("mousemove", this.onMouseMove), this.el.addEventListener("mouseleave", this.onMouseLeave), (e = this.contentWrapperEl) === null || void 0 === e || e.addEventListener("scroll", this.onScroll), i.addEventListener("resize", this.onWindowResize), this.contentEl) { if (window.ResizeObserver) { let s = !1; const r = i.ResizeObserver || ResizeObserver; this.resizeObserver = new r(function () { s && i.requestAnimationFrame(function () { t.recalculate(); }); }), this.resizeObserver.observe(this.el), this.resizeObserver.observe(this.contentEl), i.requestAnimationFrame(function () { s = !0; }); } this.mutationObserver = new i.MutationObserver(function () { i.requestAnimationFrame(function () { t.recalculate(); }); }), this.mutationObserver.observe(this.contentEl, { childList: !0, subtree: !0, characterData: !0 }); } }, e.prototype.recalculate = function () { if (this.heightAutoObserverEl && this.contentEl && this.contentWrapperEl && this.wrapperEl && this.placeholderEl) { const e = H(this.el); this.elStyles = e.getComputedStyle(this.el), this.isRtl = this.elStyles.direction === "rtl"; const t = this.contentEl.offsetWidth; const i = this.heightAutoObserverEl.offsetHeight <= 1; const s = this.heightAutoObserverEl.offsetWidth <= 1 || t > 0; const r = this.contentWrapperEl.offsetWidth; const l = this.elStyles.overflowX; const o = this.elStyles.overflowY; this.contentEl.style.padding = "".concat(this.elStyles.paddingTop, " ").concat(this.elStyles.paddingRight, " ").concat(this.elStyles.paddingBottom, " ").concat(this.elStyles.paddingLeft), this.wrapperEl.style.margin = "-".concat(this.elStyles.paddingTop, " -").concat(this.elStyles.paddingRight, " -").concat(this.elStyles.paddingBottom, " -").concat(this.elStyles.paddingLeft); const n = this.contentEl.scrollHeight; const a = this.contentEl.scrollWidth; this.contentWrapperEl.style.height = i ? "auto" : "100%", this.placeholderEl.style.width = s ? "".concat(t || a, "px") : "auto", this.placeholderEl.style.height = "".concat(n, "px"); const c = this.contentWrapperEl.offsetHeight; this.axis.x.isOverflowing = t !== 0 && a > t, this.axis.y.isOverflowing = n > c, this.axis.x.isOverflowing = l !== "hidden" && this.axis.x.isOverflowing, this.axis.y.isOverflowing = o !== "hidden" && this.axis.y.isOverflowing, this.axis.x.forceVisible = this.options.forceVisible === "x" || !0 === this.options.forceVisible, this.axis.y.forceVisible = this.options.forceVisible === "y" || !0 === this.options.forceVisible, this.hideNativeScrollbar(); const h = this.axis.x.isOverflowing ? this.scrollbarWidth : 0; const u = this.axis.y.isOverflowing ? this.scrollbarWidth : 0; this.axis.x.isOverflowing = this.axis.x.isOverflowing && a > r - u, this.axis.y.isOverflowing = this.axis.y.isOverflowing && n > c - h, this.axis.x.scrollbar.size = this.getScrollbarSize("x"), this.axis.y.scrollbar.size = this.getScrollbarSize("y"), this.axis.x.scrollbar.el && (this.axis.x.scrollbar.el.style.width = "".concat(this.axis.x.scrollbar.size, "px")), this.axis.y.scrollbar.el && (this.axis.y.scrollbar.el.style.height = "".concat(this.axis.y.scrollbar.size, "px")), this.positionScrollbar("x"), this.positionScrollbar("y"), this.toggleTrackVisibility("x"), this.toggleTrackVisibility("y"); } }, e.prototype.getScrollbarSize = function (e) { let t, i; if (void 0 === e && (e = "y"), !this.axis[e].isOverflowing || !this.contentEl) return 0; let s; const r = this.contentEl[this.axis[e].scrollSizeAttr]; const l = (i = (t = this.axis[e].track.el) === null || void 0 === t ? void 0 : t[this.axis[e].offsetSizeAttr]) !== null && void 0 !== i ? i : 0; const o = l / r; return s = Math.max(~~(o * l), this.options.scrollbarMinSize), this.options.scrollbarMaxSize && (s = Math.min(s, this.options.scrollbarMaxSize)), s; }, e.prototype.positionScrollbar = function (t) { let i, s, r; void 0 === t && (t = "y"); const l = this.axis[t].scrollbar; if (this.axis[t].isOverflowing && this.contentWrapperEl && l.el && this.elStyles) { const o = this.contentWrapperEl[this.axis[t].scrollSizeAttr]; const n = ((i = this.axis[t].track.el) === null || void 0 === i ? void 0 : i[this.axis[t].offsetSizeAttr]) || 0; const a = parseInt(this.elStyles[this.axis[t].sizeAttr], 10); let c = this.contentWrapperEl[this.axis[t].scrollOffsetAttr]; c = t === "x" && this.isRtl && ((s = e.getRtlHelpers()) === null || void 0 === s ? void 0 : s.isScrollOriginAtZero) ? -c : c, t === "x" && this.isRtl && (c = ((r = e.getRtlHelpers()) === null || void 0 === r ? void 0 : r.isScrollingToNegative) ? c : -c); const h = c / (o - a); let u = ~~((n - l.size) * h); u = t === "x" && this.isRtl ? -u + (n - l.size) : u, l.el.style.transform = t === "x" ? "translate3d(".concat(u, "px, 0, 0)") : "translate3d(0, ".concat(u, "px, 0)"); } }, e.prototype.toggleTrackVisibility = function (e) { void 0 === e && (e = "y"); const t = this.axis[e].track.el; const i = this.axis[e].scrollbar.el; t && i && this.contentWrapperEl && (this.axis[e].isOverflowing || this.axis[e].forceVisible ? (t.style.visibility = "visible", this.contentWrapperEl.style[this.axis[e].overflowAttr] = "scroll", this.el.classList.add("".concat(this.classNames.scrollable, "-").concat(e))) : (t.style.visibility = "hidden", this.contentWrapperEl.style[this.axis[e].overflowAttr] = "hidden", this.el.classList.remove("".concat(this.classNames.scrollable, "-").concat(e))), this.axis[e].isOverflowing ? i.style.display = "block" : i.style.display = "none"); }, e.prototype.showScrollbar = function (e) { void 0 === e && (e = "y"), this.axis[e].isOverflowing && !this.axis[e].scrollbar.isVisible && (_(this.axis[e].scrollbar.el, this.classNames.visible), this.axis[e].scrollbar.isVisible = !0); }, e.prototype.hideScrollbar = function (e) { void 0 === e && (e = "y"), this.axis[e].isOverflowing && this.axis[e].scrollbar.isVisible && (q(this.axis[e].scrollbar.el, this.classNames.visible), this.axis[e].scrollbar.isVisible = !1); }, e.prototype.hideNativeScrollbar = function () { this.offsetEl && (this.offsetEl.style[this.isRtl ? "left" : "right"] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? "-".concat(this.scrollbarWidth, "px") : "0px", this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? "-".concat(this.scrollbarWidth, "px") : "0px"); }, e.prototype.onMouseMoveForAxis = function (e) { void 0 === e && (e = "y"); const t = this.axis[e]; t.track.el && t.scrollbar.el && (t.track.rect = t.track.el.getBoundingClientRect(), t.scrollbar.rect = t.scrollbar.el.getBoundingClientRect(), this.isWithinBounds(t.track.rect) ? (this.showScrollbar(e), _(t.track.el, this.classNames.hover), this.isWithinBounds(t.scrollbar.rect) ? _(t.scrollbar.el, this.classNames.hover) : q(t.scrollbar.el, this.classNames.hover)) : (q(t.track.el, this.classNames.hover), this.options.autoHide && this.hideScrollbar(e))); }, e.prototype.onMouseLeaveForAxis = function (e) { void 0 === e && (e = "y"), q(this.axis[e].track.el, this.classNames.hover), q(this.axis[e].scrollbar.el, this.classNames.hover), this.options.autoHide && this.hideScrollbar(e); }, e.prototype.onDragStart = function (e, t) { let i; void 0 === t && (t = "y"); const s = j(this.el); const r = H(this.el); const l = this.axis[t].scrollbar; const o = t === "y" ? e.pageY : e.pageX; this.axis[t].dragOffset = o - (((i = l.rect) === null || void 0 === i ? void 0 : i[this.axis[t].offsetAttr]) || 0), this.draggedAxis = t, _(this.el, this.classNames.dragging), s.addEventListener("mousemove", this.drag, !0), s.addEventListener("mouseup", this.onEndDrag, !0), this.removePreventClickId === null ? (s.addEventListener("click", this.preventClick, !0), s.addEventListener("dblclick", this.preventClick, !0)) : (r.clearTimeout(this.removePreventClickId), this.removePreventClickId = null); }, e.prototype.onTrackClick = function (e, t) { let i; let s; let r; let l; const o = this; void 0 === t && (t = "y"); const n = this.axis[t]; if (this.options.clickOnTrack && n.scrollbar.el && this.contentWrapperEl) { e.preventDefault(); const a = H(this.el); this.axis[t].scrollbar.rect = n.scrollbar.el.getBoundingClientRect(); const c = (s = (i = this.axis[t].scrollbar.rect) === null || void 0 === i ? void 0 : i[this.axis[t].offsetAttr]) !== null && void 0 !== s ? s : 0; const h = parseInt((l = (r = this.elStyles) === null || void 0 === r ? void 0 : r[this.axis[t].sizeAttr]) !== null && void 0 !== l ? l : "0px", 10); let u = this.contentWrapperEl[this.axis[t].scrollOffsetAttr]; const d = (t === "y" ? this.mouseY - c : this.mouseX - c) < 0 ? -1 : 1; const p = d === -1 ? u - h : u + h; const v = function () { o.contentWrapperEl && (d === -1 ? u > p && (u -= 40, o.contentWrapperEl[o.axis[t].scrollOffsetAttr] = u, a.requestAnimationFrame(v)) : u < p && (u += 40, o.contentWrapperEl[o.axis[t].scrollOffsetAttr] = u, a.requestAnimationFrame(v))); }; v(); } }, e.prototype.getContentElement = function () { return this.contentEl; }, e.prototype.getScrollElement = function () { return this.contentWrapperEl; }, e.prototype.removeListeners = function () { const e = H(this.el); this.el.removeEventListener("mouseenter", this.onMouseEnter), this.el.removeEventListener("pointerdown", this.onPointerEvent, !0), this.el.removeEventListener("mousemove", this.onMouseMove), this.el.removeEventListener("mouseleave", this.onMouseLeave), this.contentWrapperEl && this.contentWrapperEl.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onWindowResize), this.mutationObserver && this.mutationObserver.disconnect(), this.resizeObserver && this.resizeObserver.disconnect(), this.onMouseMove.cancel(), this.onWindowResize.cancel(), this.onStopScrolling.cancel(), this.onMouseEntered.cancel(); }, e.prototype.unMount = function () { this.removeListeners(); }, e.prototype.isWithinBounds = function (e) { return this.mouseX >= e.left && this.mouseX <= e.left + e.width && this.mouseY >= e.top && this.mouseY <= e.top + e.height; }, e.prototype.findChild = function (e, t) { const i = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector; return Array.prototype.filter.call(e.children, function (e) { return i.call(e, t); })[0]; }, e.rtlHelpers = null, e.defaultOptions = { forceVisible: !1, clickOnTrack: !0, scrollbarMinSize: 25, scrollbarMaxSize: 0, ariaLabel: "scrollable content", classNames: { contentEl: "simplebar-content", contentWrapper: "simplebar-content-wrapper", offset: "simplebar-offset", mask: "simplebar-mask", wrapper: "simplebar-wrapper", placeholder: "simplebar-placeholder", scrollbar: "simplebar-scrollbar", track: "simplebar-track", heightAutoObserverWrapperEl: "simplebar-height-auto-observer-wrapper", heightAutoObserverEl: "simplebar-height-auto-observer", visible: "simplebar-visible", horizontal: "simplebar-horizontal", vertical: "simplebar-vertical", hover: "simplebar-hover", dragging: "simplebar-dragging", scrolling: "simplebar-scrolling", scrollable: "simplebar-scrollable", mouseEntered: "simplebar-mouse-entered" }, scrollableNode: null, contentNode: null, autoHide: !0 }, e.getOptions = B, e.helpers = V, e; }()); const Y = X.helpers; const F = Y.getOptions; const I = Y.addClasses; const $ = (function (t) { function i () { for (var e = [], s = 0; s < arguments.length; s++)e[s] = arguments[s]; const r = t.apply(this, e) || this; return i.instances.set(e[0], r), r; } return (function (t, i) { if (typeof i !== "function" && i !== null) throw new TypeError("Class extends value " + String(i) + " is not a constructor or null"); function s () { this.constructor = t; }e(t, i), t.prototype = i === null ? Object.create(i) : (s.prototype = i.prototype, new s()); }(i, t)), i.initDOMLoadedElements = function () { document.removeEventListener("DOMContentLoaded", this.initDOMLoadedElements), window.removeEventListener("load", this.initDOMLoadedElements), Array.prototype.forEach.call(document.querySelectorAll("[data-simplebar]"), function (e) { e.getAttribute("data-simplebar") === "init" || i.instances.has(e) || new i(e, F(e.attributes)); }); }, i.removeObserver = function () { let e; (e = i.globalObserver) === null || void 0 === e || e.disconnect(); }, i.prototype.initDOM = function () { let e; let t; let i; const s = this; if (!Array.prototype.filter.call(this.el.children, function (e) { return e.classList.contains(s.classNames.wrapper); }).length) { for (this.wrapperEl = document.createElement("div"), this.contentWrapperEl = document.createElement("div"), this.offsetEl = document.createElement("div"), this.maskEl = document.createElement("div"), this.contentEl = document.createElement("div"), this.placeholderEl = document.createElement("div"), this.heightAutoObserverWrapperEl = document.createElement("div"), this.heightAutoObserverEl = document.createElement("div"), I(this.wrapperEl, this.classNames.wrapper), I(this.contentWrapperEl, this.classNames.contentWrapper), I(this.offsetEl, this.classNames.offset), I(this.maskEl, this.classNames.mask), I(this.contentEl, this.classNames.contentEl), I(this.placeholderEl, this.classNames.placeholder), I(this.heightAutoObserverWrapperEl, this.classNames.heightAutoObserverWrapperEl), I(this.heightAutoObserverEl, this.classNames.heightAutoObserverEl); this.el.firstChild;) this.contentEl.appendChild(this.el.firstChild); this.contentWrapperEl.appendChild(this.contentEl), this.offsetEl.appendChild(this.contentWrapperEl), this.maskEl.appendChild(this.offsetEl), this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl), this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl), this.wrapperEl.appendChild(this.maskEl), this.wrapperEl.appendChild(this.placeholderEl), this.el.appendChild(this.wrapperEl), (e = this.contentWrapperEl) === null || void 0 === e || e.setAttribute("tabindex", "0"), (t = this.contentWrapperEl) === null || void 0 === t || t.setAttribute("role", "region"), (i = this.contentWrapperEl) === null || void 0 === i || i.setAttribute("aria-label", this.options.ariaLabel); } if (!this.axis.x.track.el || !this.axis.y.track.el) { const r = document.createElement("div"); const l = document.createElement("div"); I(r, this.classNames.track), I(l, this.classNames.scrollbar), r.appendChild(l), this.axis.x.track.el = r.cloneNode(!0), I(this.axis.x.track.el, this.classNames.horizontal), this.axis.y.track.el = r.cloneNode(!0), I(this.axis.y.track.el, this.classNames.vertical), this.el.appendChild(this.axis.x.track.el), this.el.appendChild(this.axis.y.track.el); }X.prototype.initDOM.call(this), this.el.setAttribute("data-simplebar", "init"); }, i.prototype.unMount = function () { X.prototype.unMount.call(this), i.instances.delete(this.el); }, i.initHtmlApi = function () { this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this), typeof MutationObserver !== "undefined" && (this.globalObserver = new MutationObserver(i.handleMutations), this.globalObserver.observe(document, { childList: !0, subtree: !0 })), document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll ? window.setTimeout(this.initDOMLoadedElements) : (document.addEventListener("DOMContentLoaded", this.initDOMLoadedElements), window.addEventListener("load", this.initDOMLoadedElements)); }, i.handleMutations = function (e) { e.forEach(function (e) { e.addedNodes.forEach(function (e) { e.nodeType === 1 && (e.hasAttribute("data-simplebar") ? !i.instances.has(e) && document.documentElement.contains(e) && new i(e, F(e.attributes)) : e.querySelectorAll("[data-simplebar]").forEach(function (e) { e.getAttribute("data-simplebar") !== "init" && !i.instances.has(e) && document.documentElement.contains(e) && new i(e, F(e.attributes)); })); }), e.removedNodes.forEach(function (e) { e.nodeType === 1 && (e.getAttribute("data-simplebar") === "init" ? i.instances.has(e) && !document.documentElement.contains(e) && i.instances.get(e).unMount() : Array.prototype.forEach.call(e.querySelectorAll('[data-simplebar="init"]'), function (e) { i.instances.has(e) && !document.documentElement.contains(e) && i.instances.get(e).unMount(); })); }); }); }, i.instances = new WeakMap(), i; }(X)); return t && $.initHtmlApi(), $; }());
